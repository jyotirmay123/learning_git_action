name: learn-github-actions
on: 
  schedule: [{cron: '00 06 * * *'}]
  pull_request: { branches: [master, main, test_pr_comments] }
  push: { branches: [master, main, test_pr_comments] }
  issue_comment:
    types: [created]
jobs:   
  check-bats-version:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: a
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        id: b
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Create comment on PR
        if: github.event_name == 'pull_request'
        env:
          github-token: ${{secrets.GITHUB_TOKEN}}
        run: |
          pull_id=${{ github.event.number }}
          echo $pull_id
      # - name: Dump context
      #   env:
      #     CTX_CONTEXT: ${{ toJSON(context) }}
      #   run: echo "$CTX_CONTEXT"

      # - name: Pingback Init
      #   if: github.event_name == 'issue_comment' && always()
      #   uses: actions/github-script@v3
      #   id: pingback
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     result-encoding: json
      #     script: |
      #       return github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: "> [ ${{ github.event.comment.body }} ]( ${{ github.event.comment.html_url }} ) \n \n \
      #         -- [ ${{ github.workflow }} ]( https://github.com/7Learnings/repo/actions/runs/${{github.run_id }} ) \n \n "
      #       })


      # - name: update pingback comment
      #   if: github.event_name == 'issue_comment' && always()
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.issues.updateComment({
      #         comment_id: ${{ github.event.comment.id }},
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body:
      #           // escape string body by encoding it as JSON
      #           ${{ toJSON(github.event.comment.body) }} + "\n" +
      #           "ISSUE_COMMENT run [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) started...**${{ job.status }}**." + "\n" +
      #           "Toolz (${{ env.PROJECT }}): [compare_forecast](https://toolz.7learnings.com/streamlit/?project=${{ env.PROJECT }}&run_identifier=${{ env.RUN_ID }}&env=${{ env.RUN_ENV }}&module=compare_forecasts)",
      #       })
      # // For multi-line comments, we need more configurational information: https://octokit.github.io/rest.js/v18#pulls-create-review-comment
                # "Toolz (${{ env.PROJECT }}): [compare_forecast](https://toolz.7learnings.com/streamlit/?project=${{ env.PROJECT }}&run_identifier=${{ env.RUN_ID }}&env=${{ env.RUN_ENV }}&module=compare_forecasts)",

      - name: Toolz (${{ env.PROJECT }}) link on PR1
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: >
            const response = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const comments_list = response.data;
            console.log(comments_list);
            const num_of_comments = comments_list.length;
            if(num_of_comments == 0){
              return github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "from create:: Toolz (${{ env.PROJECT }}): [datasci-toolz](https://toolz.7learnings.com/streamlit/?project=${{ env.PROJECT }}&run_identifier=${{ env.RUN_ID }}&env=${{ env.RUN_ENV }})",
              });
            } else {
              return github.issues.updateComment({
                comment_id: comments_list[num_of_comments-1].id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body:
                  // escape string body by encoding it as JSON
                  comments_list[num_of_comments-1].body + "\n" +
                  "from update:: Toolz (${{ env.PROJECT }}): [datasci-toolz](https://toolz.7learnings.com/streamlit/?project=${{ env.PROJECT }}&run_identifier=${{ env.RUN_ID }}&env=${{ env.RUN_ENV }})",
              });
            }
# github.pulls.createReviewComment({
#   pull_number: ${{ github.event.number }},
#   owner: context.repo.owner,
#   repo: context.repo.repo,
#   body: 'hi'
# })

